// Generated by CoffeeScript 1.12.2
var Cursor, Graph, TimelineGui, Track;

Graph = require('./graph');

Cursor = require('./cursor');

Track = require('./track');

TimelineGui = (function() {
  TimelineGui.prototype.trackLabelWidth = 147;

  TimelineGui.prototype.trackLabelHeight = 12;

  TimelineGui.prototype.tracksScrollWidth = 12;

  TimelineGui.prototype.tracksScrollHeight = 0;

  TimelineGui.prototype.tracksScrollThumbPos = 0;

  TimelineGui.prototype.tracksScrollThumbHeight = 0;

  TimelineGui.prototype.tracksScrollY = 0;

  TimelineGui.prototype.timeScrollWidth = 0;

  TimelineGui.prototype.timeScrollHeight = 12;

  TimelineGui.prototype.timeScrollThumbPos = 0;

  TimelineGui.prototype.timeScrollThumbWidth = 0;

  TimelineGui.prototype.timeScrollX = 0;

  TimelineGui.prototype.headerHeight = 40;

  TimelineGui.prototype.canvasHeight = 160;

  TimelineGui.prototype.draggingTime = false;

  TimelineGui.prototype.draggingTracksScrollThumb = false;

  TimelineGui.prototype.draggingTimeScrollThumb = false;

  TimelineGui.prototype.draggingKeys = false;

  TimelineGui.prototype.draggingTimeScale = false;

  TimelineGui.prototype.selectedKeys = [];

  TimelineGui.prototype.timeScale = 1;

  TimelineGui.prototype.trackNameCounter = 0;

  function TimelineGui(container, timeline) {
    this.timeline = timeline;
    $((function(_this) {
      return function() {
        _this.canvas = window.document.getElementById(container);
        _this.$timeline = $('#' + container);
        _this.canvasHeight = _this.$timeline.height();
        _this.canvas.width = _this.$timeline.width();
        _this.canvas.height = _this.canvasHeight;
        _this.ctx = _this.canvas.getContext('2d');
        _this.graph = new Graph(_this.ctx);
        _this.cursor = new Cursor(_this.ctx);
        _this.initTracks();
        return _this.init();
      };
    })(this));
  }

  TimelineGui.prototype.init = function() {
    this.canvas.addEventListener('mousewheel', (function(_this) {
      return function(event) {
        return _this.onCanvasMousewheel(event);
      };
    })(this));
    this.canvas.addEventListener('mousedown', (function(_this) {
      return function(event) {
        return _this.onMouseDown(event);
      };
    })(this));
    window.document.body.addEventListener('mousemove', (function(_this) {
      return function(event) {
        return _this.onDocumentMouseMove(event);
      };
    })(this));
    this.canvas.addEventListener('mousemove', (function(_this) {
      return function(event) {
        return _this.onCanvasMouseMove(event);
      };
    })(this));
    window.document.body.addEventListener('mouseup', (function(_this) {
      return function() {
        return _this.onMouseUp();
      };
    })(this));
    this.canvas.addEventListener('dblclick', (function(_this) {
      return function(event) {
        return _this.onMouseDoubleClick(event);
      };
    })(this));
    return window.resizeEvents.on('drag_resize', (function(_this) {
      return function(type) {
        _this.canvasHeight = _this.$timeline.height();
        _this.canvas.width = _this.$timeline.width();
        _this.canvas.height = _this.canvasHeight;
        return _this.update();
      };
    })(this));
  };

  TimelineGui.prototype.onMouseUp = function() {
    if (this.draggingTime) {
      this.draggingTime = false;
    }
    if (this.draggingKeys) {
      this.draggingKeys = false;
    }
    if (this.draggingTracksScrollThumb) {
      this.draggingTracksScrollThumb = false;
    }
    if (this.draggingTimeScale) {
      this.draggingTimeScale = false;
    }
    if (this.draggingTimeScrollThumb) {
      return this.draggingTimeScrollThumb = false;
    }
  };

  TimelineGui.prototype.onMouseDown = function(event) {
    var x, y;
    x = event.layerX;
    y = event.layerY;
    console.log(y, this.canvasHeight - this.timeScrollHeight);
    if (y < this.headerHeight) {
      this.draggingTime = true;
      this.setTime(x);
      return this.onCanvasMouseMove(event);
    } else if (x > this.canvas.width - this.tracksScrollWidth && y > this.headerHeight) {
      if (y >= this.headerHeight + this.tracksScrollThumbPos && y <= this.headerHeight + this.tracksScrollThumbPos + this.tracksScrollThumbHeight) {
        this.tracksScrollThumbDragOffset = y - this.headerHeight - this.tracksScrollThumbPos;
        return this.draggingTracksScrollThumb = true;
      }
    } else if (y > this.headerHeight && y < this.canvasHeight - this.timeScrollHeight) {
      this.selectKeys(event.layerX, event.layerY);
      if (this.selectedKeys.length > 0) {
        this.draggingKeys = true;
      }
      return this.cancelKeyClick = false;
    } else if (y > this.canvasHeight - this.timeScrollHeight) {
      console.log('ok');
      if (x >= this.timeScrollThumbPos && x <= this.timeScrollThumbPos + this.timeScrollThumbWidth) {
        this.timeScrollThumbDragOffset = x - this.timeScrollThumbPos;
        return this.draggingTimeScrollThumb = true;
      }
    }
  };

  TimelineGui.prototype.onCanvasMousewheel = function(event) {
    var increment, value;
    increment = 0.010000;
    value = event.wheelDelta < 0 ? this.timeScale + increment : this.timeScale - increment;
    return this.timeScale = Math.max(0.01, Math.min(value, 1));
  };

  TimelineGui.prototype.onDocumentMouseMove = function(event) {
    var draggedKey, i, l, ref, x, y;
    x = event.layerX;
    y = event.layerY;
    if (this.draggingTime) {
      this.setTime(x);
    }
    if (this.draggingKeys) {
      for (i = l = 0, ref = this.selectedKeys.length; 0 <= ref ? l <= ref : l >= ref; i = 0 <= ref ? ++l : --l) {
        draggedKey = this.selectedKeys[i];
        draggedKey.time = Math.max(0, this.xToTime(x));
      }
    }
    this.cancelKeyClick = true;
    this.timeScrollThumbPos = this.timeScrollX * (this.timeScrollWidth - this.timeScrollThumbWidth);
    if (this.draggingTracksScrollThumb) {
      this.tracksScrollThumbPos = y - this.headerHeight - this.tracksScrollThumbDragOffset;
      if (this.tracksScrollThumbPos < 0) {
        this.tracksScrollThumbPos = 0;
      }
      if (this.tracksScrollThumbPos + this.tracksScrollThumbHeight > this.tracksScrollHeight) {
        this.tracksScrollThumbPos = Math.max(0, this.tracksScrollHeight - this.tracksScrollThumbHeight);
      }
      if (this.tracksScrollHeight - this.tracksScrollThumbHeight > 0) {
        this.tracksScrollY = this.tracksScrollThumbPos / (this.tracksScrollHeight - this.tracksScrollThumbHeight);
      } else {
        this.tracksScrollY = 0;
      }
    }
    if (this.draggingTimeScrollThumb) {
      this.timeScrollThumbPos = x - this.timeScrollThumbDragOffset;
      if (this.timeScrollThumbPos < 0) {
        this.timeScrollThumbPos = 0;
      }
      if (this.timeScrollThumbPos + this.timeScrollThumbWidth > this.timeScrollWidth) {
        this.timeScrollThumbPos = Math.max(0, this.timeScrollWidth - this.timeScrollThumbWidth);
      }
      if (this.timeScrollWidth - this.timeScrollThumbWidth > 0) {
        return this.timeScrollX = this.timeScrollThumbPos / (this.timeScrollWidth - this.timeScrollThumbWidth);
      } else {
        return this.timeScrollX = 0;
      }
    }
  };

  TimelineGui.prototype.onCanvasMouseMove = function(event) {
    var x, y;
    x = event.layerX;
    return y = event.layerY;
  };

  TimelineGui.prototype.onMouseDoubleClick = function(event) {};

  TimelineGui.prototype.initTracks = function() {
    var anim, easing, easingFunc, i, j, k, nextObjectTrack, nextTrackIndex, objectTrack, parentObjectTrack, propertyTrack, startValue, track;
    this.tracks = [];
    i = void 0;
    j = void 0;
    anim = void 0;
    i = 0;
    while (i < this.timeline.animations.length) {
      anim = this.timeline.animations[i];
      objectTrack = null;
      propertyTrack = null;
      j = 0;
      while (j < this.tracks.length) {
        if (this.tracks[j].type === 'object' && this.tracks[j].target === anim.target) {
          objectTrack = this.tracks[j];
        }
        if (this.tracks[j].type === 'property' && this.tracks[j].target === anim.target && this.tracks[j].propertyName === anim.propertyName) {
          propertyTrack = this.tracks[j];
        }
        j++;
      }
      if (!objectTrack) {
        objectTrack = {
          type: 'object',
          id: anim.targetName,
          name: anim.targetName,
          target: anim.target,
          propertyTracks: []
        };
        if (!objectTrack.name) {
          objectTrack.name = 'Object' + this.trackNameCounter++;
        }
        this.tracks.push(objectTrack);
      }
      if (!propertyTrack) {
        propertyTrack = {
          type: 'property',
          id: objectTrack.name + '.' + anim.propertyName,
          name: anim.propertyName,
          propertyName: anim.propertyName,
          target: anim.target,
          parent: objectTrack,
          anims: []
        };
        parentObjectTrack = null;
        nextObjectTrack = null;
        k = 0;
        while (k < this.tracks.length) {
          if (this.tracks[k].type === 'object') {
            if (parentObjectTrack && !nextObjectTrack) {
              nextObjectTrack = this.tracks[k];
            }
            if (this.tracks[k].target === propertyTrack.target) {
              parentObjectTrack = this.tracks[k];
            }
          }
          k++;
        }
        if (nextObjectTrack) {
          nextTrackIndex = this.tracks.indexOf(nextObjectTrack);
          this.tracks.splice(nextTrackIndex, 0, propertyTrack);
        } else {
          this.tracks.push(propertyTrack);
        }
        parentObjectTrack.propertyTracks.push(propertyTrack);
      }
      propertyTrack.anims.push(anim);
      i++;
    }
    i = 0;
    while (i < this.tracks.length) {
      track = this.tracks[i];
      track.keys = [];
      if (track.type === 'object') {
        i++;
        continue;
      }
      j = 0;
      while (j < track.anims.length) {
        anim = track.anims[j];
        if (anim.delay > 0) {
          startValue = 0;
          easing = anim.easing;
          if (j === 0) {
            startValue = track.target[track.propertyName];
          } else {
            startValue = track.anims[j - 1].endValue;
          }
          track.keys.push({
            time: anim.startTime,
            value: startValue,
            easing: easing,
            track: track
          });
        }
        easingFunc = function(k) {
          return k;
        };
        if (j < track.anims.length - 1) {
          if (track.anims[j + 1].delay === 0) {
            easingFunc = track.anims[j + 1].easing;
          }
        }
        track.keys.push({
          time: anim.endTime,
          value: anim.endValue,
          easing: easingFunc,
          track: track
        });
        j++;
      }
      i++;
    }
  };

  TimelineGui.prototype.selectKeys = function(x, y) {};

  TimelineGui.prototype.sortTrackKeys = function() {};

  TimelineGui.prototype.rebuildSelectedTracks = function() {};

  TimelineGui.prototype.findAnimationEnd = function() {};

  TimelineGui.prototype.drawRect = function(x, y, w, h, color, stroke) {
    if (stroke == null) {
      stroke = false;
    }
    this.ctx.beginPath();
    if (stroke) {
      this.ctx.strokeStyle = this.shadeColor2(color, 300);
    }
    if (stroke) {
      this.ctx.strokeWidth = 2;
    }
    if (stroke) {
      this.ctx.strokeRect(x, y, w, h);
    }
    this.ctx.fillStyle = color;
    this.ctx.fillRect(x, y, w, h);
    return this.ctx.closePath();
  };

  TimelineGui.prototype.drawLine = function(x1, y1, x2, y2, color) {
    this.ctx.strokeStyle = color;
    this.ctx.beginPath();
    this.ctx.moveTo(x1 + .5, y1 + .5);
    this.ctx.lineTo(x2 + .5, y2 + .5);
    this.ctx.closePath();
    return this.ctx.stroke();
  };

  TimelineGui.prototype.drawTimeMarker = function(x, y, w, h, color) {
    var millis, s, sec, seconds, sign, time;
    sec = this.xToTime(x);
    seconds = sec % 60;
    sign = seconds < 0 ? '-' : '';
    s = seconds.toFixed(2).toString().split('.');
    millis = Math.abs(s[1]);
    time = sign + (seconds < 10 ? '0' : '') + Math.abs(s[0]) + '+' + millis + (millis < 10 ? '0' : '');
    this.drawRect(x, y, w, h, color);
    this.ctx.font = '13px sans-serif';
    this.ctx.fillStyle = 'black';
    return this.ctx.fillText(time, x + 4, y + 14);
  };

  TimelineGui.prototype.setTime = function(x) {
    var animationEnd;
    this.timeline.time = this.xToTime(x);
    animationEnd = this.findAnimationEnd();
    if (this.timeline.time < 0) {
      this.timeline.time = 0;
    }
    if (this.timeline.time > animationEnd) {
      return this.timeline.time = animationEnd;
    }
  };

  TimelineGui.prototype.timeToX = function(time) {
    var animationEnd, visibleTime;
    animationEnd = this.timeline.findAnimationEnd();
    visibleTime = this.xToTime(this.canvas.width - this.tracksScrollWidth) - this.xToTime(20);
    if (visibleTime < animationEnd) {
      time -= (animationEnd - visibleTime) * this.timeScrollX;
    }
    return time * this.timeScale * 200 + 10;
  };

  TimelineGui.prototype.xToTime = function(x) {
    var animationEnd, timeShift, visibleTime;
    animationEnd = this.timeline.findAnimationEnd();
    visibleTime = (this.canvas.width - this.tracksScrollWidth - 20) / (this.timeScale * 200);
    timeShift = Math.max(0, (animationEnd - visibleTime) * this.timeScrollX);
    return (x - 10) / (this.timeScale * 200) + timeShift;
  };

  TimelineGui.prototype.disableShadows = function() {
    this.ctx.shadowColor = 'rgba(0,0,0,0)';
    this.ctx.shadowBlur = 0;
    this.ctx.shadowOffsetX = 0;
    return this.ctx.shadowOffsetY = 0;
  };

  TimelineGui.prototype.shadeColor2 = function(color, percent) {
    var B, BB, G, GG, R, RR;
    R = parseInt(color.substring(1, 3), 16);
    G = parseInt(color.substring(3, 5), 16);
    B = parseInt(color.substring(5, 7), 16);
    R = parseInt(R * (100 + percent) / 100);
    G = parseInt(G * (100 + percent) / 100);
    B = parseInt(B * (100 + percent) / 100);
    R = R < 255 ? R : 255;
    G = G < 255 ? G : 255;
    B = B < 255 ? B : 255;
    RR = R.toString(16).length === 1 ? '0' + R.toString(16) : R.toString(16);
    GG = G.toString(16).length === 1 ? '0' + G.toString(16) : G.toString(16);
    BB = B.toString(16).length === 1 ? '0' + B.toString(16) : B.toString(16);
    return '#' + RR + GG + BB;
  };

  TimelineGui.prototype.update = function() {
    var animationEnd, h, i, lastTimeLabelX, minutes, scrollY, sec, seconds, time, timeScrollRatio, timelineEnd, timelineStart, totalTracksHeight, tracksScrollRatio, visibleTime, w, x, yshift;
    if (this.canvas) {
      w = this.canvas.width;
      h = this.canvas.height;
      this.tracksScrollHeight = this.canvas.height - this.headerHeight - this.timeScrollHeight;
      totalTracksHeight = this.tracks.length * this.trackLabelHeight;
      tracksScrollRatio = this.tracksScrollHeight / totalTracksHeight;
      this.tracksScrollThumbHeight = Math.min(Math.max(20, this.tracksScrollHeight * tracksScrollRatio), this.tracksScrollHeight);
      this.timeScrollWidth = this.canvas.width;
      animationEnd = this.timeline.findAnimationEnd();
      visibleTime = this.xToTime(this.canvas.width - this.tracksScrollWidth) - this.xToTime(0);
      timeScrollRatio = Math.max(0, Math.min(visibleTime / animationEnd, 1));
      this.timeScrollThumbWidth = timeScrollRatio * this.timeScrollWidth;
      if (this.timeScrollThumbPos + this.timeScrollThumbWidth > this.timeScrollWidth) {
        this.timeScrollThumbPos = Math.max(0, this.timeScrollWidth - this.timeScrollThumbWidth);
      }
      this.ctx.clearRect(0, 0, w, h);
      this.ctx.save();
      this.ctx.beginPath();
      this.ctx.moveTo(0, this.headerHeight + 1);
      this.ctx.lineTo(this.canvas.width, this.headerHeight + 1);
      this.ctx.lineTo(this.canvas.width, this.canvas.height - this.timeScrollHeight);
      this.ctx.lineTo(0, this.canvas.height - this.timeScrollHeight);
      this.ctx.clip();
      i = 0;
      while (i < this.tracks.length) {
        yshift = this.headerHeight + this.trackLabelHeight * (i + 1);
        scrollY = this.tracksScrollY * (this.tracks.length * this.trackLabelHeight - this.canvas.height + this.headerHeight);
        yshift -= scrollY;
        if (yshift < this.headerHeight) {
          i++;
          continue;
        }
        this.drawTrack(this.tracks[i], yshift);
        i++;
      }
      this.ctx.restore();
      timelineStart = 0;
      timelineEnd = 10;
      lastTimeLabelX = 0;
      this.disableShadows();
      this.ctx.fillStyle = '#666666';
      x = this.timeToX(0);
      sec = timelineStart;
      while (x < this.canvas.width) {
        x = this.timeToX(sec);
        this.drawLine(x + i, this.headerHeight, x + i, this.headerHeight * 0.8, 'rgba(102, 102, 102, 0.3)');
        minutes = Math.floor(sec / 60);
        seconds = sec % 60;
        time = (minutes < 10 ? '0' : '') + minutes + ':' + (seconds < 10 ? '0' : '') + seconds;
        if (x - lastTimeLabelX > 30) {
          this.ctx.font = 'bold 11px sans-serif';
          this.ctx.fillText(time, x - 13, this.headerHeight * 0.6);
          lastTimeLabelX = x;
        }
        sec += 1;
      }
      this.drawRect(this.timeToX(this.timeline.time), 0, 2.5, h - 12, 'rgb(96, 192, 64)');
      this.drawTimeMarker(this.timeToX(this.timeline.time), h - 35, 45, 20, 'rgb(96, 192, 64)');
      this.drawRect(this.canvas.width - this.tracksScrollWidth, this.headerHeight + 1, this.tracksScrollWidth, this.tracksScrollHeight - 2, '#535353');
      if (this.tracksScrollThumbHeight < this.tracksScrollHeight) {
        this.drawRect(this.canvas.width - this.tracksScrollWidth, this.headerHeight + 1 + this.tracksScrollThumbPos, this.tracksScrollWidth, this.tracksScrollThumbHeight - 2, 'rgba(58, 58, 58, 0.85)');
      }
      this.drawRect(0, h - this.timeScrollHeight, w, this.timeScrollHeight, 'rgba(58, 58, 58, 0.85)');
      if (this.timeScrollThumbWidth < this.timeScrollWidth) {
        this.drawRect(1 + this.timeScrollThumbPos, h - this.timeScrollHeight, this.timeScrollThumbWidth, this.timeScrollHeight, '#535353');
      }
      return this.drawLine(0, this.headerHeight, w, this.headerHeight, 'rgba(102, 102, 102, 0.3)');
    }
  };

  return TimelineGui;

})();

module.exports = TimelineGui;

//# sourceMappingURL=timeline.gui.js.map
